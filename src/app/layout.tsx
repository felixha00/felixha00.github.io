import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { ThemeProvider } from "@/components/theme-provider"

import "./globals.css";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import PromptFooter from "@/components/prompt-footer";
import { NavigatorProvider } from "@/providers/client-navigator-context";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BriefcaseBusiness, Cpu, FolderGit2, Palette, Video, TerminalSquare, Plus } from "lucide-react";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import React from "react";
import SlidingTabs from "@/components/tabs-nav";
import { CommandProvider } from "@/providers/command-provider";
import { cn } from "@/lib/utils";
import Image from "next/image";
import Nav from "@/components/nav";
import { cookies, headers } from "next/headers"; // server-side headers
import { AppProvider } from "@/providers/app-provider";
import ScrollIntoViewComponent from "@/components/scroll-into-view-component";

const SECTIONS = [
  { key: "home", label: "CLI", icon: <TerminalSquare className="size-3" /> },
  { key: "experience", label: "Experience", icon: <BriefcaseBusiness className="size-3" /> },
  { key: "software", label: "Software", icon: <FolderGit2 className="size-3" /> },
  { key: "hardware", label: "Hardware", icon: <Cpu className="size-3" /> },
  { key: "design", label: "Graphic Design", icon: <Palette className="size-3" /> },
  { key: "content", label: "Content Creation", icon: <Video className="size-3" /> },
];

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "felix@portfolio: ~$",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  // Get the user's IP address
  let ip = (await headers()).get("x-forwarded-for") || "0.0.0.0"
  if (ip?.substring(0, 7) == "::ffff:") {
    ip = ip?.substring(7)
  }

  return (
    <html lang="en" suppressHydrationWarning>

      <body
        className={cn(`${geistSans.variable} ${geistMono.variable} antialiased max-h-screen min-h-screen flex flex-col`, false && `bg-[url(/bg-thing.svg)] bg-no-repeat bg-center bg-size-[80vw] bg-fixed`)}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {/* <div className="fixed inset-0 pointer-events-none z-[-1]">
          <div className="relative flex justify-center items-center w-full h-full">
            <Image
              src="/bg-thing.svg"
              alt="Background"
              className="w-[80vw] opacity-20"
              width={1920}
              height={1080}
              priority
            />
          </div>
        </div> */}
          <AppProvider ip={ip}>
            <CommandProvider>
              <NavigatorProvider>


                <nav className="p-2 w-full flex flex-row items-stretch gap-4 fixed pointer-events-none z-50 pb-16">
                  {/* background gradient layer, non-interactive */}
                  <div className="bg-linear-to-b from-background from-25% to-transparent absolute inset-0 pointer-events-none" />
                  <Nav />
                </nav>

                <div className="pt-15 pb-[50px] flex flex-col grow">
                  {children}
                  <ScrollIntoViewComponent />
                </div>

                <footer className="w-full flex flex-row gap-4 fixed z-50 bottom-0 pt-4 pointer-events-none">
                  {/* visual shadow */}
                  <div className="bg-linear-to-t from-background from-25% to-transparent w-full pointer-events-none absolute inset-0" />

                  <div className="pointer-events-auto flex w-full">
                    <PromptFooter />
                  </div>
                </footer>

              </NavigatorProvider>
            </CommandProvider>
          </AppProvider>
        </ThemeProvider>
      </body>
    </html >
  );
}